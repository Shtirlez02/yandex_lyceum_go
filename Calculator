package main

import (
	"errors"
	"fmt"
	"slices"
	"strconv"
	"strings"
)

var ErrSymbols = errors.New("Некорректный ввод")
var ErrEmpty = errors.New("Пустая строка")

func remove(slice []string, s int) []string {
	return append(slice[:s], slice[s+1:]...)
}
func SearchBracket(slice []string, ind int) (int, int, error) {
	k := 0
	for i := ind + 1; i < len(slice); i++ {
		if slice[i] == "(" {
			k += 1
		} else if slice[i] == ")" && k != 0 {
			k -= 1
		} else if slice[i] == ")" && k == 0 {
			return ind, i, nil
		}
	}
	return 0, 0, ErrSymbols
}

func sub(slice []string, ind int) ([]string, error) {
	if strings.Contains("()+-/*", slice[ind-1]) || strings.Contains("()+-/*", slice[ind+1]) {
		return slice, ErrSymbols
	}
	ch1, _ := strconv.ParseFloat(slice[ind-1], 64)
	ch2, _ := strconv.ParseFloat(slice[ind+1], 64)
	slice[ind] = strconv.FormatFloat(ch1-ch2, 'g', -1, 64)
	slice = remove(slice, ind-1)
	slice = remove(slice, ind)
	return slice, nil
}
func sum(slice []string, ind int) ([]string, error) {
	if strings.Contains("()+-/*", slice[ind-1]) || strings.Contains("()+-/*", slice[ind+1]) {
		return slice, ErrSymbols
	}
	ch1, _ := strconv.ParseFloat(slice[ind-1], 64)
	ch2, _ := strconv.ParseFloat(slice[ind+1], 64)
	slice[ind] = strconv.FormatFloat(ch1+ch2, 'g', -1, 64)
	slice = remove(slice, ind-1)
	slice = remove(slice, ind)
	return slice, nil
}
func mult(slice []string, ind int) ([]string, error) {
	if strings.Contains("()+-/*", slice[ind-1]) || strings.Contains("()+-/*", slice[ind+1]) {
		return slice, ErrSymbols
	}
	ch1, _ := strconv.ParseFloat(slice[ind-1], 64)
	ch2, _ := strconv.ParseFloat(slice[ind+1], 64)
	slice[ind] = strconv.FormatFloat(ch1*ch2, 'g', -1, 64)
	slice = remove(slice, ind-1)
	slice = remove(slice, ind)
	return slice, nil
}
func divis(slice []string, ind int) ([]string, error) {
	if strings.Contains("()+-/*", slice[ind-1]) || strings.Contains("()+-/*", slice[ind+1]) {
		return slice, ErrSymbols
	}
	ch1, _ := strconv.ParseFloat(slice[ind-1], 64)
	ch2, _ := strconv.ParseFloat(slice[ind+1], 64)
	slice[ind] = strconv.FormatFloat(ch1/ch2, 'g', -1, 64)
	slice = remove(slice, ind-1)
	slice = remove(slice, ind)
	return slice, nil
}
func priorit(slice []string) (float64, error) {
	if len(slice) == 0 {
		return 0, ErrEmpty
	}
	ind := 0
	inb1, inb2 := 0, 0
	var err error
	if strings.Contains("+/*", slice[0]) || strings.Contains("-+/*", slice[len(slice)-1]) {
		return 0, ErrSymbols
	} else if slice[0] == "-" {
		slice = slice[1:]
		slice[0] = "-" + slice[0]
	}
	for true {
		if slice[ind] == ")" {
			return 0, ErrSymbols
		} else if slice[ind] == "(" {
			inb1, inb2, err = SearchBracket(slice, ind)
			if err != nil {
				return 0, ErrSymbols
			} else {
				var res_in_bracket float64
				res_in_bracket, err = priorit(slice[inb1+1 : inb2])
				slice = slices.Delete(slice, inb1+1, inb2+1)
				slice[inb1] = fmt.Sprintf("%f", res_in_bracket)
			}
		}
		ind += 1
		if ind >= len(slice) {
			break
		}
	}
	ind = 0
	for true {
		if slice[ind] == "/" {
			mayzero, _ := strconv.ParseFloat(slice[ind+1], 64)
			if mayzero == 0 {
				return 0, fmt.Errorf("На ноль делить нельзя")
			}
			slice, err = divis(slice, ind)
			ind -= 1
		} else if slice[ind] == "*" {
			slice, err = mult(slice, ind)
			ind -= 1
		}
		if err != nil {
			return 0, ErrSymbols
		}
		ind += 1
		if ind >= len(slice) {
			break
		}
	}
	ind = 0
	for true {
		if slice[ind] == "+" {
			slice, err = sum(slice, ind)
			ind -= 1
		} else if slice[ind] == "-" {
			slice, err = sub(slice, ind)
			ind -= 1
		}
		if err != nil {
			return 0, ErrSymbols
		}
		ind += 1
		if ind >= len(slice) {
			break
		}
	}
	res, _ := strconv.ParseFloat(slice[0], 64)
	return res, nil
}
func Calc(expression string) (float64, error) {
	if len(expression) == 0 {
		return 0, ErrEmpty
	}
	str := []rune(expression)
	var sym []string
	kon := ""
	for _, i := range str {
		if strings.Contains("()+-/*", string(i)) == false {
			kon += string(i)
		} else if strings.Contains("()+-/*", string(i)) == true && len(kon) != 0 {
			sym = append(sym, kon)
			kon = ""
			sym = append(sym, string(i))
		} else {
			sym = append(sym, string(i))
		}
	}
	if len(kon) != 0 {
		sym = append(sym, kon)
	}
	ind := 0
	inb1, inb2 := 0, 0
	var err error
	if strings.Contains("+/*", sym[0]) || strings.Contains("-+/*", sym[len(sym)-1]) {
		return 0, ErrSymbols
	} else if sym[0] == "-" {
		sym = sym[1:]
		sym[0] = "-" + sym[0]
	}
	for true {
		if sym[ind] == ")" {
			return 0, ErrSymbols
		} else if sym[ind] == "(" {
			inb1, inb2, err = SearchBracket(sym, ind)
			if err != nil {
				return 0, ErrSymbols
			} else {
				var res_in_bracket float64
				res_in_bracket, err = priorit(sym[inb1+1 : inb2])
				sym = slices.Delete(sym, inb1+1, inb2+1)
				sym[inb1] = fmt.Sprintf("%f", res_in_bracket)
			}
		}
		ind += 1
		if ind >= len(sym) {
			break
		}
	}
	ind = 0
	for true {
		if sym[ind] == "/" {
			mayzero, _ := strconv.ParseFloat(sym[ind+1], 64)
			if mayzero == 0 {
				return 0, fmt.Errorf("На ноль делить нельзя")
			}
			sym, err = divis(sym, ind)
			ind -= 1
		} else if sym[ind] == "*" {
			sym, err = mult(sym, ind)
			ind -= 1
		}
		if err != nil {
			return 0, ErrSymbols
		}
		ind += 1
		if ind >= len(sym) {
			break
		}
	}
	ind = 0
	for true {
		if sym[ind] == "+" {
			sym, err = sum(sym, ind)
			ind -= 1
		} else if sym[ind] == "-" {
			sym, err = sub(sym, ind)
			ind -= 1
		}
		if err != nil {
			return 0, ErrSymbols
		}
		ind += 1
		if ind >= len(sym) {
			break
		}
	}
	res, _ := strconv.ParseFloat(sym[0], 64)
	return res, nil
}
